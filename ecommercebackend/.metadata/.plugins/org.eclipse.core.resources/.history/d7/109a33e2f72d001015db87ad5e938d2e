package com.products;

import jakarta.persistence.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;

@Entity // Mark this as a JPA entity
@Table(name = "users") // Specify the table name
public class User implements UserDetails { // Implement UserDetails

    @Id // Mark as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-generate the ID
    private Long id;

    @Column(unique = true, nullable = false) // Username must be unique and not null
    private String username; // Will be used as the login identifier (could also be email)

    @Column(nullable = false) // Password must not be null
    private String password; // Store the BCrypt encoded password

    @Column(nullable = false) // Role must not be null
    private String role; // Store the user's role, e.g., "ROLE_USER", "ROLE_ADMIN"

    // --- Add Shipping Address Fields Here ---
    private String shippingFullName;
    private String shippingAddressLine1;
    private String shippingAddressLine2;
    private String shippingCity;
    private String shippingState;
    private String shippingPostalCode;
    private String shippingCountry;
    private String shippingPhoneNumber;
    // --- End Shipping Address Fields ---


    // Default constructor is required by JPA
    public User() {
    }

    // Constructor for creating new users during registration
    public User(String username, String password, String role) {
        this.username = username;
        this.password = password;
        this.role = role;
    }

    // --- Add Getters and Setters for the new shipping fields ---
    public String getShippingFullName() { return shippingFullName; }
    public void setShippingFullName(String shippingFullName) { this.shippingFullName = shippingFullName; }
    public String getShippingAddressLine1() { return shippingAddressLine1; }
    public void setShippingAddressLine1(String shippingAddressLine1) { this.shippingAddressLine1 = shippingAddressLine1; }
    public String getShippingAddressLine2() { return shippingAddressLine2; }
    public void setShippingAddressLine2(String shippingAddressLine2) { this.shippingAddressLine2 = shippingAddressLine2; }
    public String getShippingCity() { return shippingCity; }
    public void setShippingCity(String shippingCity) { this.shippingCity = shippingCity; }
    public String getShippingState() { return shippingState; }
    public void setShippingState(String shippingState) { this.shippingState = shippingState; }
    public String getShippingPostalCode() { return shippingPostalCode; }
    public void setShippingPostalCode(String shippingPostalCode) { this.shippingPostalCode = shippingPostalCode; }
    public String getShippingCountry() { return shippingCountry; }
    public void setShippingCountry(String shippingCountry) { this.shippingCountry = shippingCountry; }
    public String getShippingPhoneNumber() { return shippingPhoneNumber; }
    public void setShippingPhoneNumber(String shippingPhoneNumber) { this.shippingPhoneNumber = shippingPhoneNumber; }
    // --- End Getters and Setters ---


    // --- Implement UserDetails methods ---
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role)); // Return the user's role as an authority
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true; // For simplicity, assume account is always valid
    }

    @Override
    public boolean isAccountNonLocked() {
        return true; // For simplicity, assume account is never locked
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true; // For simplicity, assume credentials never expire
    }

    @Override
    public boolean isEnabled() {
        return true; // For simplicity, assume user is always enabled
    }
    // --- End UserDetails methods ---

    // Optional: Override toString(), equals(), hashCode() if needed
}